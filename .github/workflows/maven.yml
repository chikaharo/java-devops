# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
  plan:
    uses: ./.github/workflows/aws_tf_plan.yml
    with:
      gh_environment: dev
    secrets:
      cli_config_credentials_token: ${{ secrets.TFC_API_TOKEN }}

  apply:
    needs: plan
    uses: ./.github/workflows/aws_tf_apply.yml
    with:
      gh_environment: dev
    secrets:
      cli_config_credentials_token: ${{ secrets.TFC_API_TOKEN }}

  deployment:
    needs: apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      # - name: Plan
      #   id: plan-terraform
      #   uses: ./.github/workflows/aws_tf_plan.yml
      #   with:
      #     gh_environment: dev

      # - name: Apply
      #   id: apply-terraform
      #   uses: ./.github/workflows/aws_tf_apply.yml
      #   with:
      #     gh_environment: dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: 1.0.0
          ECR_REPOSITORY: boardgame
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update kube config
        env:
          EKS_CLUSTER_NAME: ${{ needs.apply.outputs.cluster_name }}
        run: |
          echo $EKS_CLUSTER_NAME
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ap-southeast-1

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: 1.0.0
          ECR_REPOSITORY: boardgame
        run: |
          envsubst < deployment-service.yaml | kubectl apply -f -

      - name: Check pods
        run: |
          kubectl get pods -o wide 
          kubectl get svc
