### Reusable workflow to download terraform artifact built by `az_tf_plan` and apply the artifact/plan ###
name: "Apply_TF_Plan"
on:
  workflow_call:
    inputs:
      tf_version:
        description: "Specifies version of Terraform to use. e.g: 1.1.0 Default=latest."
        required: false
        type: string
        default: latest
      gh_environment:
        description: "Specifies the GitHub deployment environment."
        required: false
        type: string
        default: "dev"
    outputs:
      cluster_name:
        description: "The cluster name output"
        value: ${{ jobs.apply-plan.outputs.cluster_name }}
    secrets:
      cli_config_credentials_token:
        description: "cli config credentials token"
        required: true
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  apply-plan:
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.terraform_output.outputs.cluster_name }}
    environment: ${{ inputs.gh_environment }}
    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}
          cli_config_credentials_token: ${{ secrets.cli_config_credentials_token }}

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd terraform
          terraform validate

      # - name: Terraform Plan
      #   id: plan
      #   run: |
      #     cd terraform
      #     terraform plan
      #   continue-on-error: true

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Terraform Output
        id: terraform_output
        run: |
          cd terraform
          terraform output cluster_name
          cluster_name=$(terraform output cluster_name | tr -d '"')
          echo "cluster_name=$cluster_name" >> $GITHUB_OUTPUT

      # - name: configure aws credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::357171621133:role/github-oidc-role
      #     role-session-name: samplerolesession
      #     aws-region: ap-southeast-1

      # - name: Print AWS SSM Parameter
      #   run: aws ssm get-parameter --name=hello_aws-gh-oidc --query Parameter.Value

      # - name: Print assumed role
      #   run: aws sts get-caller-identity
